import asyncio
import psutil
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from config import TOKEN, CHAT_ID
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


bot = Bot(token=TOKEN)
dp = Dispatcher()

CPU_THRESHOLD = 80
RAM_THRESHOLD = 85
DISK_THRESHOLD = 90
TEMP_THRESHOLD = 80

last_alerts = {"cpu": False, "ram": False, "disk": False, "temp": False}

@dp.message(Command('start'))
async def user(message: types.Message):
    logging.info('–ü—Ä–æ–∂–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞!')
    await user_mon()


async def get_cpu_temp():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑ —Å–µ–Ω—Å–æ—Ä–∞ it8728 temp3 (Intel PECI)"""
    try:
        temps = psutil.sensors_temperatures()

        coretemp_key = next((k for k in temps if k.startswith("coretemp")), None)

        if coretemp_key:

            for sensor in temps[coretemp_key]:
                if "Package" in sensor.label or "Pkg" in sensor.label:
                    logging.info(f"üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU (Package): {sensor.current}¬∞C")
                    return sensor.current

            core_temps = [s.current for s in temps[coretemp_key] if "Core" in s.label]
            if core_temps:
                max_temp = max(core_temps)
                logging.info(f"üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU (–º–∞–∫—Å. —è–¥—Ä–æ): {max_temp}¬∞C")
                return max_temp
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
        return "N/A"


async def get_gpu_temp():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É GPU –∏–∑ —Å–µ–Ω—Å–æ—Ä–∞ nouveau (temp1)"""
    try:
        temps = psutil.sensors_temperatures()

        nouveau_key = next((k for k in temps if "nouveau" in k), None)

        if nouveau_key:
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–æ–±—ã—á–Ω–æ temp1)
            for sensor in temps[nouveau_key]:
                if sensor.label == "temp1" or "GPU" in sensor.label:
                    logging.info(f"üéÆ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU ({nouveau_key}): {sensor.current}¬∞C")
                    return sensor.current

            if temps[nouveau_key]:
                logging.info(f"üéÆ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU ({nouveau_key}, –ø–µ—Ä–≤—ã–π —Å–µ–Ω—Å–æ—Ä): {temps[nouveau_key][0].current}¬∞C")
                return temps[nouveau_key][0].current

        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–Ω—Å–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã GPU!")
        return "N/A"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã GPU: {e}")
        return "N/A"


async def monitor_server(GPU_TEMP_THRESHOLD=50):
    """–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)"""
    global last_alerts
    while True:
        cpu = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory().percent
        disk = psutil.disk_usage('/').percent
        cpu_temp = await get_cpu_temp()
        gpu_temp = await get_gpu_temp()

        logging.info(f"üìä CPU: {cpu}%, RAM: {memory}%, Disk: {disk}%, Temp CPU: {cpu_temp}¬∞C")


        await send_alert("cpu", cpu, CPU_THRESHOLD, "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU!")
        await send_alert("ram", memory, RAM_THRESHOLD, "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ RAM!")
        await send_alert("disk", disk, DISK_THRESHOLD, "‚ö†Ô∏è –î–∏—Å–∫ –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω!")
        if cpu_temp != "N/A" and isinstance(cpu_temp, (int, float)) and cpu_temp > TEMP_THRESHOLD:
            await send_alert("temp", cpu_temp, TEMP_THRESHOLD, "üî• –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU!")
        if gpu_temp != "N/A" and isinstance(gpu_temp, (int, float)) and gpu_temp > GPU_TEMP_THRESHOLD:
            await send_alert("gpu_temp", gpu_temp, GPU_TEMP_THRESHOLD, "üî• –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU!")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

async def user_mon():
    cpu = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent
    cpu_temp = await get_cpu_temp()
    gpu_temp = await get_gpu_temp()

    message = (
        f"üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞*\n"
        f"üíª CPU: {cpu}%\n"
        f"üìà RAM: {memory}%\n"
        f"üíæ Disk: {disk}%\n"
        f"üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {cpu_temp}¬∞C\n"
        f'üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU: {gpu_temp}¬∞C'
    )

    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
        logging.info("‚úÖ –ï–∂–µ—á–∞—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
async def send_monitoring():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞ —Ä–∞–∑ –≤ —á–∞—Å"""
    while True:
        cpu = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory().percent
        disk = psutil.disk_usage('/').percent
        cpu_temp = await get_cpu_temp()
        gpu_temp = await get_gpu_temp()

        message = (
            f"üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞*\n"
            f"üíª CPU: {cpu}%\n"
            f"üìà RAM: {memory}%\n"
            f"üíæ Disk: {disk}%\n"
            f"üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {cpu_temp}¬∞C\n"
            f'üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU: {gpu_temp}¬∞C'
        )

        try:
            await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
            logging.info("‚úÖ –ï–∂–µ—á–∞—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

        await asyncio.sleep(3600)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å


async def send_alert(param, value, threshold, alert_message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞"""
    if value > threshold and not last_alerts[param]:
        try:
            await bot.send_message(chat_id=CHAT_ID, text=f"{alert_message}\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}%", parse_mode="Markdown")
            logging.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {alert_message} ({value}%)")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
        last_alerts[param] = True
    elif value <= threshold and last_alerts[param]:
        last_alerts[param] = False
        logging.info(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å {param} —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞.")


async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    asyncio.create_task(monitor_server())  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    asyncio.create_task(send_monitoring())  # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ—á–∞—Å–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π


if __name__ == "__main__":
    asyncio.run(main())
